import re
from time import sleep
from typing import Dict, List

from bs4 import BeautifulSoup
from loguru import logger
from selenium.webdriver.common.by import By

from config_data.config import ATTACKS, DANGEROUS_ATTACKS, SHOTS_ON_TARGET, SHOTS_TOWARDS_THE_GOAL, ID_CHAT, \
    PARTNERS_URL, CORNER_CHECK, CORNERS
from datadase.count_table import get_countlist, add_countlist
from datadase.dumplist_table import add_dumplist, check_dumplist
from datadase.sentlist_table import add_sentlist, check_sentlist
from datadase.statlist_table import get_statlist
from loader_telebot import bot
from utilities.driver import get_driver


@logger.catch
def filter_stats(string) -> str | List:
    """
    –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
    """
    string = string.text.strip()
    if '\n' in string:
        strings = [int(elem.strip()) for elem in string.split()]
        return strings

    return string


@logger.catch
def filter_events(string) -> str | int:
    """
    –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã
    """
    string_title = string.get('title')
    if string_title == '–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏':
        return string_title
    elif string_title == '–£–≥–ª–æ–≤—ã–µ':
        string = int(string.text.strip())
        return string
    else:
        return 0


@logger.catch
def check_game(game: Dict) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –º–∞—Ç—á –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é
    """

    if check_sentlist(game['url']) or check_dumplist(game['url']):
        return False

    pattern: str = r'(?<=https://1xstavka.ru/).+'
    url_start: str = 'https://eventsstat.com/'

    browser = get_driver(headless=True)
    browser.get(game['url'])

    sleep(1)
    page = browser.page_source
    soup = BeautifulSoup(page, 'lxml')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ –∏–≥—Ä–µ (–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    actions_btn: List = browser.find_elements(By.CLASS_NAME, 'event-actions-btn__svg')
    if actions_btn:
        actions_btn[0].click()
    else:
        logger.info(f"{game['url']} –ù–µ—Ç event-actions-btn__svg")
        add_dumplist(game['url'])
        browser.quit()
        return False
    sleep(1)
    events_btn: List = browser.find_elements(By.CLASS_NAME, 'event-statistics__btn')
    if not events_btn:
        logger.info(f"{game['url']} –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤ –¥–µ–π—Å—Ç–≤–∏–∏")
        add_dumplist(game['url'])
        browser.quit()
        return False
    else:
        for btn in events_btn:
            if btn.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                btn.click()
                browser.switch_to.window(browser.window_handles[1])
                url = browser.current_url
                url_stats = url_start + re.search(pattern, url).group(0)
                browser.quit()
                break
        else:
            logger.info(f"{game['url']} –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'")
            add_dumplist(game['url'])
            browser.quit()
            return False

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ —Ç–∞–±–ª–æ –∏–≥—Ä—ã
    results = soup.find_all("div", class_="mainTablo")
    if not results:
        logger.info(f"{game['url']} –ù–µ—Ç —Ç–∞–±–ª–æ")
        add_dumplist(game['url'])
        return False

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞
    stats = results[0].find_all("div", class_="c-chart-stat__row")
    if not stats:
        logger.info(f"{game['url']} –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞")
        add_dumplist(game['url'])
        return False
    stats = [filter_stats(string) for string in stats]
    if len(stats) != 10:
        logger.info(f"{game['url']} –ù–µ –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞")
        add_dumplist(game['url'])
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω—É–∂–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    flag = True
    for index in range(0, len(stats), 2):
        if stats[index] == '–ê—Ç–∞–∫–∏':
            if stats[index + 1][0] + stats[index + 1][1] < ATTACKS:
                flag = False
        elif stats[index] == '–û–ø–∞—Å–Ω—ã–µ –∞—Ç–∞–∫–∏':
            if stats[index + 1][0] + stats[index + 1][1] < DANGEROUS_ATTACKS:
                flag = False
        elif stats[index] == '–£–¥–∞—Ä—ã –≤ —Å—Ç–≤–æ—Ä':
            if stats[index + 1][0] + stats[index + 1][1] < SHOTS_ON_TARGET:
                flag = False
        elif stats[index] == '–£–¥–∞—Ä—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤–æ—Ä–æ—Ç':
            if stats[index + 1][0] + stats[index + 1][1] < SHOTS_TOWARDS_THE_GOAL:
                flag = False
        elif stats[index] == '–í–ª–∞–¥–µ–Ω–∏–µ –º—è—á–æ–º %':
            if abs(stats[index + 1][0] - stats[index + 1][1]) > 10:
                if stats[index + 1][0] > stats[index + 1][1] and game['looser_id'] == 1:
                    flag = False
                elif stats[index + 1][0] < stats[index + 1][1] and game['looser_id'] == 2:
                    flag = False
    if not flag:
        return False

    tablo_str = ''
    for index in range(0, len(stats), 2):
        tablo_str += f'{stats[index]} {stats[index + 1][0]} - {stats[index + 1][1]}\n'

    # –ü–æ–ª—É—á–∞–µ–º —É–≥–ª–æ–≤—ã–µ –º–∞—Ç—á–∞
    c_tablo = soup.find_all("div", class_="c-tablo__main c-tablo-main")
    if not c_tablo:
        logger.info(f"{game['url']} –ù–µ—Ç –ø—Ä–∞–≤–æ–≥–æ —Ç–∞–±–ª–æ")
        add_dumplist(game['url'])
        return False
    c_tablo_all = c_tablo[0].find_all("div", class_="o-tablo-info-list u-asfe c-tablo__event-info")
    if not c_tablo_all:
        corner_one = 0
        corner_two = 0
    else:
        event_one = c_tablo_all[0].find_all("div", class_="c-tablo-event")
        if not event_one:
            corner_one = 0
        else:
            events_one = [filter_events(event) for event in event_one]
            if '–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏' in events_one:
                add_dumplist(game['url'])
                logger.info(f"{game['url']} –í –º–∞—Ç—á–µ –∫—Ä–∞—Å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")
                return False
            else:
                corner_one = sum(events_one)

        if len(c_tablo_all) < 2:
            corner_two = 0
        else:
            events_two = c_tablo_all[1].find_all("div", class_="c-tablo-event")
            if not events_two:
                corner_two = 0
            else:
                events_two = [filter_events(event) for event in events_two]
                if '–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏' in events_two:
                    add_dumplist(game['url'])
                    return False
                else:
                    corner_two = sum(events_two)

    if CORNER_CHECK:
        if corner_one + corner_two < CORNERS:
            return False

    tablo_str += f'–£–≥–ª–æ–≤—ã–µ {corner_one} - {corner_two}\n'

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç—á–∞
    bets = soup.find_all("div", class_="bet_group")
    if not bets:
        logger.info(f"{game['url']} –ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫")
        add_dumplist(game['url'])
        return False

    for group in bets:
        name_bet = group.find_all("span", class_="bet-title__label bet-title__text bet-title-label")
        if '–¢–æ—Ç–∞–ª' == name_bet[0].text.strip():
            bet = group.find_all("span", class_="bet_type")
            if bet[0].text.strip() != f'{game["score_sum"]}.5 –ë':
                logger.info(f"{game['url']} –ù–µ –≤–µ—Ä–Ω–∞—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ {bet[0].text.strip()}")
                add_dumplist(game['url'])
                return False
            kf = group.find_all("i", class_="koeff__label")
            bet_str = f'–¢–æ—Ç–∞–ª: {bet[0].text.strip()} - {kf[0].text.strip()}'
            try:
                bet_str += f', {bet[2].text.strip()} - {kf[2].text.strip()}'
            except IndexError:
                pass

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç—É
            liga_rate = get_statlist(game["liga"])
            if liga_rate:
                star_rating = round(liga_rate["win_rate"])
                star = 'üèÖ'
                if 20 < star_rating <= 40:
                    star += 'üèÖ'
                elif 40 < star_rating <= 60:
                    star += 'üèÖüèÖ'
                elif 60 < star_rating <= 80:
                    star += 'üèÖüèÖüèÖ'
                elif 80 < star_rating <= 100:
                    star += 'üèÖüèÖüèÖüèÖ'
                stat_str = f'\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–≥–∏: {star_rating}% {star}\n' \
                           f'–í—Å–µ–≥–æ: {liga_rate["all"]} –í—ã–∏–≥—Ä–∞–Ω–æ: {liga_rate["win"]}'
            else:
                stat_str = ''

            count_message = get_countlist('count')

            text_message = f'<i>#{count_message} –ë—É–¥–µ—Ç –≥–æ–ª!\n' \
                           f'üèÜ {game["liga"]}\n' \
                           f'‚öΩ <code>{game["teams"]}</code>\n' \
                           f'–°—á–µ—Ç: {game["score"]} ' \
                           f'–í—Ä–µ–º—è {game["time"]}\n' \
                           f'{tablo_str}' \
                           f'{bet_str}{stat_str}' \
                           f'\n<a href="{PARTNERS_URL}">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>/' \
                           f'<a href="{game["url"]}">–°—Ç–∞–≤–∏—Ç—å –Ω–∞ –º–∞—Ç—á</a></i>'

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å–∏–≥–Ω–∞–ª
            current_id_message = (
                bot.send_message(chat_id=ID_CHAT, text=text_message, parse_mode='html')).id

            add_sentlist(
                url_stats=url_stats, url=game["url"], id_message=current_id_message,
                text_message=text_message, score_sum=game['score_sum'], liga_names=game["liga"])

            add_countlist('count')
            return True
    else:
        logger.info(f"{game['url']} –ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ '–¢–æ—Ç–∞–ª'")
        add_dumplist(game["url"])
        return False
